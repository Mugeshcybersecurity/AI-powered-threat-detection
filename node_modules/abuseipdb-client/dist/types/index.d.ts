import { DocWithErrors } from 'jsonapi-typescript';
import { z } from 'zod';

/**
 * Utility type, represents a non empty array.
 * @group Helpers
 */
type NonEmptyArr<T> = [T, ...T[]];
/**
 * Wrapper for IPDB's JSON API error response.
 * This empty interface is used for renaming the DocWithErrors external import.
 * @group AbuseIPDB API Response
 */
interface APIResponseError extends DocWithErrors {
}
/**
 * Client response for parsed IPDB's API endpoints.
 * @group Client Wrapper
 */
interface ClientResponse<T extends APIResponse> {
    headers: ClientHeaders;
    result?: Extract<APIResponse, T>;
    error?: APIResponseError;
}
/**
 * Wrapper for client headers, includes some of the fetch response fields and API rate limit headers.
 * @group Client Wrapper
 */
interface ClientHeaders extends ClientAPIRateLimitHTTPHeaders, ClientFetchResponseHeaders {
}
/**
 * IPDB's API rate-limit HTTP headers.
 * @group Client Wrapper
 */
interface ClientAPIRateLimitHTTPHeaders {
    'retry-after'?: string;
    'x-ratelimit-limit': string;
    'x-ratelimit-remaining': string;
    'x-ratelimit-reset'?: string;
    'x-generated-at'?: string;
}
/**
 * Fetch fields extracted from the API response.
 * @group Client Wrapper
 */
interface ClientFetchResponseHeaders {
    url: string;
    status: number;
    statusText: string;
}
/**
 * Union of all IPDB API responses.
 * @group AbuseIPDB API Response
 */
type APIResponse = APICheckEndpointResponse | APIReportsEndpointResponse | APIBlacklistEndpointResponse | APIBlacklistEndpointTextResponse | APIReportEndpointResponse | APICheckBlockEndpointResponse | APIBulkReportEndpointResponse | APIClearAddressEndpointResponse | APIServerErrorResultResponse;
/**
 * AbuseIPDB's Check endpoint JSON structure.
 * @see [Check Endpoint API](https://docs.abuseipdb.com/#check-endpoint)
 * @group AbuseIPDB API Response
 */
interface APICheckEndpointResponse {
    data: {
        ipAddress: string;
        isPublic: boolean;
        ipVersion?: number;
        isWhitelisted: boolean;
        abuseConfidenceScore: number;
        countryCode: string | null;
        countryName?: string | null;
        usageType: UsageType;
        isp: string;
        domain: string | null;
        hostnames: Array<string>;
        totalReports: number;
        numDistinctUsers: number;
        lastReportedAt: string;
        reports: Array<ReportsEntity>;
    };
}
/**
 * AbuseIPDB's Reports endpoint JSON structure.
 * @see [Reports Endpoint API](https://docs.abuseipdb.com/#reports-endpoint)
 * @group AbuseIPDB API Response
 */
interface APIReportsEndpointResponse {
    data: {
        total: number;
        page: number;
        count: number;
        perPage: number;
        lastPage: number;
        nextPageUrl: string | null;
        previousPageUrl: string | null;
        results: Array<ReportsEntity>;
    };
}
/**
 * AbuseIPDB's Blacklist endpoint JSON structure.
 * @see [Blacklist JSON Endpoint API](https://docs.abuseipdb.com/#blacklist-endpoint)
 * @group AbuseIPDB API Response
 */
interface APIBlacklistEndpointResponse {
    meta: {
        generatedAt: string;
    };
    data: [
        {
            ipAddress: string;
            countryCode: string;
            abuseConfidenceScore: number;
            lastReportedAt: string;
        }
    ];
}
/**
 * AbuseIPDB's Blacklist endpoint text structure.
 * For the blacklist endpoint as plaintext, the `x-generated-at` API header is included, but
 * for keeping consistency over the client wrapped responses, it is moved to the `meta`
 * attribute, and the text body content is wrapped in a `data` attribute.
 * @see [Blacklist Text Endpoint API](https://docs.abuseipdb.com/#plaintext-blacklist)
 * @group AbuseIPDB API Response
 */
interface APIBlacklistEndpointTextResponse {
    meta: {
        generatedAt: string;
    };
    data: string;
}
/**
 * AbuseIPDB's Report endpoint JSON structure.
 * @see [Report Endpoint API](https://docs.abuseipdb.com/#report-endpoint)
 * @group AbuseIPDB API Response
 */
interface APIReportEndpointResponse {
    data: {
        ipAddress: string;
        abuseConfidenceScore: number;
    };
}
/**
 * AbuseIPDB's Check-Block endpoint JSON structure.
 * @see [Check-Block Endpoint API](https://docs.abuseipdb.com/#check-block-endpoint)
 * @group AbuseIPDB API Response
 */
interface APICheckBlockEndpointResponse {
    data: {
        networkAddress: string;
        netmask: string;
        minAddress: string;
        maxAddress: string;
        numPossibleHosts: number;
        addressSpaceDesc: string;
        reportedAddress: NonEmptyArr<ReportedAddressEntity>;
    };
}
/**
 * AbuseIPDB's Bulk-Report endpoint JSON structure.
 * @see [Bulk-Report Endpoint API](https://docs.abuseipdb.com/#bulk-report-endpoint)
 * @group AbuseIPDB API Response
 */
interface APIBulkReportEndpointResponse {
    data: {
        savedReports: number;
        invalidReports: Array<InvalidReportsEntity>;
    };
}
/**
 * AbuseIPDB's Clear-Address endpoint JSON structure.
 * @see [Clear-Address Endpoint API](https://docs.abuseipdb.com/#clear-address-endpoint)
 * @group AbuseIPDB API Response
 */
interface APIClearAddressEndpointResponse {
    data: {
        numReportsDeleted: number;
    };
}
/**
 * AbuseIPDB's Server Error message structure.
 * When a server error occurs (5xx), there's a message string
 * present on the result response structure.
 * This is not the same as the `APIResponseError` object.
 * @group AbuseIPDB API Response
 */
interface APIServerErrorResultResponse {
    message: string;
}
/**
 * Possible `usageTypes` values as defined by the Check Endpoint documentation.
 * @see [Check Endpoint usageType](https://docs.abuseipdb.com/#check-endpoint)
 * @group AbuseIPDB API Response
 */
type UsageType = 'Commercial' | 'Organization' | 'Government' | 'Military' | 'University/College/School' | 'Library' | 'Content Delivery Network' | 'Fixed Line ISP' | 'Mobile ISP' | 'Data Center/Web Hosting/Transit' | 'Search Engine Spider' | 'Reserved';
/**
 * @group AbuseIPDB API Response
 */
interface ReportsEntity {
    reportedAt: string;
    comment: string;
    categories: NonEmptyArr<ReportCategory>;
    reporterId: number;
    reporterCountryCode: string;
    reporterCountryName: string;
}
/**
 * @group AbuseIPDB API Response
 */
interface ReportedAddressEntity {
    ipAddress: string;
    numReports: number;
    mostRecentReport: string;
    abuseConfidenceScore: number;
    countryCode: string | null;
}
/**
 * @group AbuseIPDB API Response
 */
interface InvalidReportsEntity {
    error: string;
    input: string;
    rowNumber: number;
}
/**
 * AbuseIPDB Report Category types.
 * @see [AbuseIPDB Report Categories](https://www.abuseipdb.com/categories)
 * @enum
 * @group AbuseIPDB API Response
 * @example
 * ```typescript
 * import { ReportCategory } from 'abuseipdb-client';
 *
 * // `ReportCategory` enum can be used to populate an array of categories.
 * const categories: Array<ReportCategory> = [
 *   ReportCategory.WebSpam,
 *   ReportCategory.BadWebBot,
 *   ReportCategory.BruteForce,
 * ];
 *
 * // Which translates to:
 * // categories = [ 10, 19, 18 ].
 *
 * // That way, it is possible to call the `report` endpoint using this reference directly:
 * client.report('127.0.0.1', categories);
 * ```
 */
declare enum ReportCategory {
    /**
     * Altering DNS records resulting in improper redirection.
     */
    DNSCompromise = 1,
    /**
     * Falsifying domain server cache (cache poisoning).
     */
    DNSPoisoning = 2,
    /**
     * Fraudulent orders.
     */
    FraudOrders = 3,
    /**
     * Participating in distributed denial-of-service (usually part of botnet).
     */
    DDOSAttack = 4,
    /**
     * FTP Brute force attempt.
     */
    FTPBruteForce = 5,
    /**
     * Oversized IP packet.
     */
    PingOfDeath = 6,
    /**
     * Phishing websites and/or email.
     */
    Phishing = 7,
    /**
     * Voice-over-IP fraud.
     */
    FraudVoIP = 8,
    /**
     * Open proxy, open relay, or Tor exit node.
     */
    OpenProxy = 9,
    /**
     * Comment/forum spam, HTTP referer spam, or other CMS spam.
     */
    WebSpam = 10,
    /**
     * Spam email content, infected attachments, and phishing emails. Note: Limit comments to only relevent information (instead of log dumps) and be sure to remove PII if you want to remain anonymous.
     */
    EmailSpam = 11,
    /**
     * CMS blog comment spam.
     */
    BlogSpam = 12,
    /**
     * VPN IP address.
     */
    VPNIP = 13,
    /**
     * Scanning for open ports and vulnerable services.
     */
    PortScan = 14,
    /**
     * General hacking attempt.
     */
    Hacking = 15,
    /**
     * Attempts at SQL injection.
     */
    SQLInjection = 16,
    /**
     * Email sender spoofing.
     */
    Spoofing = 17,
    /**
     * Credential brute-force attacks on webpage logins and services like SSH, FTP, SIP, SMTP, RDP, etc. This category is seperate from DDoS attacks.
     */
    BruteForce = 18,
    /**
     * Webpage scraping (for email addresses, content, etc) and crawlers that do not honor robots.txt. Excessive requests and user agent spoofing can also be reported here.
     */
    BadWebBot = 19,
    /**
     * Host is likely infected with malware and being used for other attacks or to host malicious content. The host owner may not be aware of the compromise. This category is often used in combination with other attack categories.
     */
    ExploitedHost = 20,
    /**
     * Attempts to probe for or exploit installed web applications such as a CMS like WordPress/Drupal, e-commerce solutions, forum software, phpMyAdmin and various other software plugins/solutions.
     */
    WebAppAttack = 21,
    /**
     * Secure Shell (SSH) abuse. Use this category in combination with more specific categories.
     */
    SSH = 22,
    /**
     * Abuse was targeted at an "Internet of Things" type device. Include information about what type of device was targeted in the comments.
     */
    IOTTargeted = 23
}

declare const abuseIPDBClientOptionsSchema: z.ZodObject<{
    /**
     * Overrides the default AbuseIPDB base API url, can be used to proxy client requests.
     * @defaultValue `https://api.abuseipdb.com/api/v2`
     */
    url: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    url?: string | undefined;
}, {
    url?: string | undefined;
}>;
/**
 * AbuseIPDBClient instance optional parameters.
 * @group Input - Optional Parameter
 */
interface AbuseIPDBClientOptions extends z.TypeOf<typeof abuseIPDBClientOptionsSchema> {
}
/**
 * @group Input - Validator
 */
declare const abuseIPDBClientSchema: z.ZodObject<{
    apiKey: z.ZodString;
    url: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    apiKey: string;
    url?: string | undefined;
}, {
    apiKey: string;
    url?: string | undefined;
}>;
declare const abuseIPDBClientConfigSchema: z.ZodObject<{
    /** Client API Key. */
    apiKey: z.ZodString;
    /**
     * Base API URL.
     * @defaultValue `https://api.abuseipdb.com/api/v2`
     */
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    apiKey: string;
    url: string;
}, {
    apiKey: string;
    url: string;
}>;
/**
 * AbuseIPDBClient instance configuration variables.
 * @group Client
 */
interface AbuseIPDBClientConfig extends z.TypeOf<typeof abuseIPDBClientConfigSchema> {
}
declare const checkOptionsSchema: z.ZodObject<{
    /** Show latest reports based on `n` days. Accepted values between 1 and 365, defaults to `30` by the API. */
    maxAgeInDays: z.ZodOptional<z.ZodNumber>;
    /** Includes in the client response all the reports (Limited to 10,000) and country name entries, based on the `maxAgeInDays` parameter. Defaults to `false` by the API. */
    verbose: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    maxAgeInDays?: number | undefined;
    verbose?: boolean | undefined;
}, {
    maxAgeInDays?: number | undefined;
    verbose?: boolean | undefined;
}>;
/**
 * Check endpoint optional parameters.
 * @group Input - Optional Parameter
 */
interface CheckOptions extends z.TypeOf<typeof checkOptionsSchema> {
}
/**
 * @group Input - Validator
 */
declare const checkSchema: z.ZodEffects<z.ZodObject<{
    ipAddress: z.ZodEffects<z.ZodString, string, string>;
    maxAgeInDays: z.ZodOptional<z.ZodNumber>;
    verbose: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    ipAddress: string;
    maxAgeInDays?: number | undefined;
    verbose?: boolean | undefined;
}, {
    ipAddress: string;
    maxAgeInDays?: number | undefined;
    verbose?: boolean | undefined;
}>, any, {
    ipAddress: string;
    maxAgeInDays?: number | undefined;
    verbose?: boolean | undefined;
}>;
declare const reportsOptionsSchema: z.ZodObject<{
    /** Show latest reports based on `n` days. Accepted values between 1 and 365, defaults to `30` by the API. */
    maxAgeInDays: z.ZodOptional<z.ZodNumber>;
    /** Pagination number based on the `perPage` parameter. Minimum accepted value is 1, defaults to `1` by the API. */
    page: z.ZodOptional<z.ZodNumber>;
    /** Amount of reports per page. Accepted values between 1 and 100, defaults to `25` by the API. */
    perPage: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    maxAgeInDays?: number | undefined;
    page?: number | undefined;
    perPage?: number | undefined;
}, {
    maxAgeInDays?: number | undefined;
    page?: number | undefined;
    perPage?: number | undefined;
}>;
/**
 * Reports endpoint optional parameters.
 * @group Input - Optional Parameter
 */
interface ReportsOptions extends z.infer<typeof reportsOptionsSchema> {
}
/**
 * @group Input - Validator
 */
declare const reportsSchema: z.ZodObject<{
    ipAddress: z.ZodEffects<z.ZodString, string, string>;
    maxAgeInDays: z.ZodOptional<z.ZodNumber>;
    page: z.ZodOptional<z.ZodNumber>;
    perPage: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    ipAddress: string;
    maxAgeInDays?: number | undefined;
    page?: number | undefined;
    perPage?: number | undefined;
}, {
    ipAddress: string;
    maxAgeInDays?: number | undefined;
    page?: number | undefined;
    perPage?: number | undefined;
}>;
declare const blacklistOptionsSchema: z.ZodObject<{
    /** Minimum confidence percentage value. Accepted values between 25 and 100, defaults to `100` by the API. Requires a subscription to use this feature.   */
    confidenceMinimum: z.ZodOptional<z.ZodNumber>;
    /**
     * Limits the amount of returned reports. Accepted values between 1 and 500000, defaults to `10000` by the API.
     * The value is capped by your current subscription tier. (10k Standard, 100k Basic, 500k Premium).
     */
    limit: z.ZodOptional<z.ZodNumber>;
    /** Returns the response as a text list, instead of JSON structure. Result is wrapped in a `ClientResponse` */
    plaintext: z.ZodOptional<z.ZodBoolean>;
    /**
     * Filters the reports based on a given array of ISO 3166-1 Alpha-2 countries, including only the given list.
     * Requires a subscription to use this feature.
     * `onlyCountries` and `exceptCountries` are mutually exclusive, only one can be defined at a time. */
    onlyCountries: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /**
     * Filters the reports based on a given array of ISO 3166-1 Alpha-2 countries, excluding only the given list.
     * Requires a subscription to use this feature.
     * `onlyCountries` and `exceptCountries` are mutually exclusive, only one can be defined at a time. */
    exceptCountries: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    confidenceMinimum?: number | undefined;
    limit?: number | undefined;
    plaintext?: boolean | undefined;
    onlyCountries?: string[] | undefined;
    exceptCountries?: string[] | undefined;
}, {
    confidenceMinimum?: number | undefined;
    limit?: number | undefined;
    plaintext?: boolean | undefined;
    onlyCountries?: string[] | undefined;
    exceptCountries?: string[] | undefined;
}>;
/**
 * @group Input - Validator
 */
declare const blacklistSchema: z.ZodEffects<z.ZodEffects<z.ZodObject<{
    /** Minimum confidence percentage value. Accepted values between 25 and 100, defaults to `100` by the API. Requires a subscription to use this feature.   */
    confidenceMinimum: z.ZodOptional<z.ZodNumber>;
    /**
     * Limits the amount of returned reports. Accepted values between 1 and 500000, defaults to `10000` by the API.
     * The value is capped by your current subscription tier. (10k Standard, 100k Basic, 500k Premium).
     */
    limit: z.ZodOptional<z.ZodNumber>;
    /** Returns the response as a text list, instead of JSON structure. Result is wrapped in a `ClientResponse` */
    plaintext: z.ZodOptional<z.ZodBoolean>;
    /**
     * Filters the reports based on a given array of ISO 3166-1 Alpha-2 countries, including only the given list.
     * Requires a subscription to use this feature.
     * `onlyCountries` and `exceptCountries` are mutually exclusive, only one can be defined at a time. */
    onlyCountries: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /**
     * Filters the reports based on a given array of ISO 3166-1 Alpha-2 countries, excluding only the given list.
     * Requires a subscription to use this feature.
     * `onlyCountries` and `exceptCountries` are mutually exclusive, only one can be defined at a time. */
    exceptCountries: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    confidenceMinimum?: number | undefined;
    limit?: number | undefined;
    plaintext?: boolean | undefined;
    onlyCountries?: string[] | undefined;
    exceptCountries?: string[] | undefined;
}, {
    confidenceMinimum?: number | undefined;
    limit?: number | undefined;
    plaintext?: boolean | undefined;
    onlyCountries?: string[] | undefined;
    exceptCountries?: string[] | undefined;
}>, any, {
    confidenceMinimum?: number | undefined;
    limit?: number | undefined;
    plaintext?: boolean | undefined;
    onlyCountries?: string[] | undefined;
    exceptCountries?: string[] | undefined;
}>, any, {
    confidenceMinimum?: number | undefined;
    limit?: number | undefined;
    plaintext?: boolean | undefined;
    onlyCountries?: string[] | undefined;
    exceptCountries?: string[] | undefined;
}>;
/**
 * Blacklist endpoint optional parameters.
 * @group Input - Optional Parameter
 */
interface BlacklistOptions extends z.TypeOf<typeof blacklistOptionsSchema> {
}
declare const reportOptionsSchema: z.ZodObject<{
    /** Message to be added to the report, limited to 1024 characters. */
    comment: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    comment?: string | undefined;
}, {
    comment?: string | undefined;
}>;
/**
 * Report endpoint optional parameters.
 * @group Input - Optional Parameter
 */
interface ReportOptions extends z.TypeOf<typeof reportOptionsSchema> {
}
/**
 * @group Input - Validator
 */
declare const reportSchema: z.ZodObject<{
    ip: z.ZodEffects<z.ZodString, string, string>;
    categories: z.ZodArray<z.ZodNumber, "many">;
    comment: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    ip: string;
    categories: number[];
    comment?: string | undefined;
}, {
    ip: string;
    categories: number[];
    comment?: string | undefined;
}>;
declare const checkBlockOptionsSchema: z.ZodObject<{
    /**
     * Show latest reports based on `n` days. Accepted values between 1 and 365, defaults to `30` by the API.
     * The value is capped by your current subscription tier. (Up to 30 on Standard, 60 on Basic, 365 on Premium).
     */
    maxAgeInDays: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    maxAgeInDays?: number | undefined;
}, {
    maxAgeInDays?: number | undefined;
}>;
/**
 * Check-Block endpoint optional parameters.
 * @group Input - Optional Parameter
 */
interface CheckBlockOptions extends z.TypeOf<typeof checkBlockOptionsSchema> {
}
/**
 * @group Input - Validator
 */
declare const checkBlockSchema: z.ZodObject<{
    network: z.ZodEffects<z.ZodString, string, string>;
    maxAgeInDays: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    network: string;
    maxAgeInDays?: number | undefined;
}, {
    network: string;
    maxAgeInDays?: number | undefined;
}>;
/**
 * @group Input - Validator
 */
declare const bulkReportSchema: z.ZodObject<{
    /** Report CSV filepath to be sent. */
    csv: z.ZodString;
}, "strip", z.ZodTypeAny, {
    csv: string;
}, {
    csv: string;
}>;
/**
 * @group Input - Validator
 */
declare const clearAddressSchema: z.ZodObject<{
    ipAddress: z.ZodEffects<z.ZodString, string, string>;
}, "strip", z.ZodTypeAny, {
    ipAddress: string;
}, {
    ipAddress: string;
}>;

/**
 * @internal
 * @group Internal
 */
type EndpointURIS = 'check' | 'reports' | 'blacklist' | 'report' | 'check-block' | 'bulk-report' | 'clear-address';
/**
 * @internal
 * @group Internal
 */
type ClientAPIHeaders = {
    Key: string;
    Accept: string;
};
/**
 * @group Client
 */
declare class AbuseIPDBClient {
    #private;
    /**
     * Creates a new AbuseIPDB client, requires an API key from AbuseIPDB's dashboard.
     * @param apiKey AbuseIPDB client API key.
     * @param options Optional parameters - {@link AbuseIPDBClientOptions}
     */
    constructor(apiKey: string, options?: AbuseIPDBClientOptions);
    /**
     * Returns the current client config.
     */
    getConfig(): AbuseIPDBClientConfig;
    /**
     * @see [Check API Endpoint](https://docs.abuseipdb.com/#check-endpoint)
     * @param ipAddress Single IPv4/IPv6 address to be verified.
     * @param options Optional parameters - {@link CheckOptions}
     */
    check(ipAddress: string, options?: CheckOptions): Promise<ClientResponse<APICheckEndpointResponse>>;
    /**
     * @see [Reports API Endpoint](https://docs.abuseipdb.com/#reports-endpoint)
     * @param ipAddress Single IPv4/IPv6 address to be verified.
     * @param options Optional parameters - {@link ReportsOptions}
     * @beta
     */
    reports(ipAddress: string, options?: ReportsOptions): Promise<ClientResponse<APIReportsEndpointResponse>>;
    /**
     * @see [Blacklist API Endpoint](https://docs.abuseipdb.com/#blacklist-endpoint)
     * @param options Optional parameters - {@link BlacklistOptions}
     */
    blacklist(options?: BlacklistOptions): Promise<ClientResponse<APIBlacklistEndpointResponse>>;
    /**
     * @see [Report API Endpoint](https://docs.abuseipdb.com/#report-endpoint)
     * @param ip Single IPv4/IPv6 address to be verified.
     * @param categories Array of categories to be reported.
     * @param options Optional parameters - {@link ReportOptions}
     */
    report(ip: string, categories: Array<ReportCategory>, options?: ReportOptions): Promise<ClientResponse<APIReportEndpointResponse>>;
    /**
     * @see [Check-Block API Endpoint](https://docs.abuseipdb.com/#check-block-endpoint)
     * @param network Single IPv4/IPv6 address block in CIDR format.
     * @param options Optional parameters - {@link CheckBlockOptions}
     */
    checkBlock(network: string, options?: CheckBlockOptions): Promise<ClientResponse<APICheckBlockEndpointResponse>>;
    /**
     * @see [Bulk-Report API Endpoint](https://docs.abuseipdb.com/#bulk-report-endpoint)
     * @param csv CSV filepath to be sent.
     */
    bulkReport(csv: string): Promise<ClientResponse<APIBulkReportEndpointResponse>>;
    /**
     * @see [Clear-Address API Endpoint](https://docs.abuseipdb.com/#clear-address-endpoint)
     * @param ipAddress Single IPv4/IPv6 address.
     */
    clearAddress(ipAddress: string): Promise<ClientResponse<APIClearAddressEndpointResponse>>;
}

/**
 * Base URL used to make client calls, defaults to AbuseIPDB's APIv2 Endpoint.
 * Can be changed when instatiating a new AbuseIPDBClient through the URL param.
 * @see {@link AbuseIPDBClientOptions}
 * @group Constants
 */
declare const BASE_URL = "https://api.abuseipdb.com/api/v2";

/**
 * Predicate function that verifies if a given array contains only valid ISO 3166-1 Alpha 2 countries.
 * @param arr Array of ISO 3166-1 Alpha 2 countries as string.
 * @returns Boolean if elements of the given array are valid.
 * @group Helpers
 */
declare const isArrISO31661Alpha2: (arr: Array<string>) => boolean;

export { APIBlacklistEndpointResponse, APIBlacklistEndpointTextResponse, APIBulkReportEndpointResponse, APICheckBlockEndpointResponse, APICheckEndpointResponse, APIClearAddressEndpointResponse, APIReportEndpointResponse, APIReportsEndpointResponse, APIResponse, APIResponseError, APIServerErrorResultResponse, AbuseIPDBClient, AbuseIPDBClientConfig, AbuseIPDBClientOptions, BASE_URL, BlacklistOptions, CheckBlockOptions, CheckOptions, ClientAPIHeaders, ClientAPIRateLimitHTTPHeaders, ClientFetchResponseHeaders, ClientHeaders, ClientResponse, EndpointURIS, InvalidReportsEntity, NonEmptyArr, ReportCategory, ReportOptions, ReportedAddressEntity, ReportsEntity, ReportsOptions, UsageType, abuseIPDBClientSchema, blacklistSchema, bulkReportSchema, checkBlockSchema, checkSchema, clearAddressSchema, isArrISO31661Alpha2, reportSchema, reportsSchema };
