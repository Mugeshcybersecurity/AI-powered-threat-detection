"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ServerErrorResponse = exports.ClientErrorResponse = exports.RedirectResponse = exports.SuccessResponse = exports.InformationalResponse = exports.AbortedResponse = exports.Response = exports.default = void 0;

var _matchStatus = _interopRequireDefault(require("./matchStatus"));

var _decodeData = _interopRequireDefault(require("./decodeData"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class Response
 * @property {number} status - response status
 * @property {string} statusText - response status text
 * @property {Object} headers - response headers
 * @property {Request} request - request that was send
 * @property {Object|string} body - response body
 * @property {string} type - response type
 * @property {Object|string} [rawBody] - response body as string, when it couldn't be decoded from expected JSON
 */
class Response {
  constructor(result, data, request) {
    Object.assign(this, data);
    this.status = result.status;
    this.statusText = result.statusText;
    this.headers = result.headers;
    this.request = request;
  }

}

exports.Response = Response;

class AbortedResponse extends Response {}

exports.AbortedResponse = AbortedResponse;

class InformationalResponse extends Response {}

exports.InformationalResponse = InformationalResponse;

class SuccessResponse extends Response {}

exports.SuccessResponse = SuccessResponse;

class RedirectResponse extends Response {}

exports.RedirectResponse = RedirectResponse;

class ClientErrorResponse extends Response {}

exports.ClientErrorResponse = ClientErrorResponse;

class ServerErrorResponse extends Response {}

exports.ServerErrorResponse = ServerErrorResponse;
const statusTypeToResponse = {
  [_matchStatus.TYPE_ABORTED]: AbortedResponse,
  [_matchStatus.TYPE_INFORMATIONAL]: InformationalResponse,
  [_matchStatus.TYPE_SUCCESS]: SuccessResponse,
  [_matchStatus.TYPE_REDIRECT]: RedirectResponse,
  [_matchStatus.TYPE_CLIENT_ERROR]: ClientErrorResponse,
  [_matchStatus.TYPE_SERVER_ERROR]: ServerErrorResponse
};

const createResponse = async (result, type, request) => {
  const statusType = (0, _matchStatus.default)(result.status);
  const ResponseClass = statusTypeToResponse[statusType];
  const data = await (0, _decodeData.default)(result, type);
  return new ResponseClass(result, data, request);
};

var _default = createResponse;
exports.default = _default;