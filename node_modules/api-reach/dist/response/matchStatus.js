"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TYPE_SERVER_ERROR = exports.TYPE_CLIENT_ERROR = exports.TYPE_REDIRECT = exports.TYPE_SUCCESS = exports.TYPE_INFORMATIONAL = exports.TYPE_ABORTED = exports.isServerError = exports.isClientError = exports.isRedirect = exports.isSuccess = exports.isInformational = exports.isAborted = exports.default = void 0;

/* eslint-disable no-magic-numbers */
const TYPE_ABORTED = "aborted";
exports.TYPE_ABORTED = TYPE_ABORTED;
const TYPE_INFORMATIONAL = "informational";
exports.TYPE_INFORMATIONAL = TYPE_INFORMATIONAL;
const TYPE_SUCCESS = "success";
exports.TYPE_SUCCESS = TYPE_SUCCESS;
const TYPE_REDIRECT = "redirect";
exports.TYPE_REDIRECT = TYPE_REDIRECT;
const TYPE_CLIENT_ERROR = "clientError";
exports.TYPE_CLIENT_ERROR = TYPE_CLIENT_ERROR;
const TYPE_SERVER_ERROR = "serverError";
exports.TYPE_SERVER_ERROR = TYPE_SERVER_ERROR;
const types = {
  // @todo >= 600 as unknown type?
  [TYPE_ABORTED]: status => !status || status === 499 || status >= 600,
  [TYPE_INFORMATIONAL]: status => status >= 100 && status < 200,
  [TYPE_SUCCESS]: status => status >= 200 && status < 300,
  [TYPE_REDIRECT]: status => status >= 300 && status < 400,
  [TYPE_CLIENT_ERROR]: status => status >= 400 && status < 499,
  // 499 is intentional here
  [TYPE_SERVER_ERROR]: status => status >= 500 && status < 600
};
const checkOrder = [TYPE_SUCCESS, TYPE_CLIENT_ERROR, TYPE_SERVER_ERROR, TYPE_REDIRECT, TYPE_ABORTED, TYPE_INFORMATIONAL];
const typesCount = checkOrder.length;

const isAborted = status => types[TYPE_ABORTED](status);

exports.isAborted = isAborted;

const isInformational = status => types[TYPE_INFORMATIONAL](status);

exports.isInformational = isInformational;

const isSuccess = status => types[TYPE_SUCCESS](status);

exports.isSuccess = isSuccess;

const isRedirect = status => types[TYPE_REDIRECT](status);

exports.isRedirect = isRedirect;

const isClientError = status => types[TYPE_CLIENT_ERROR](status);

exports.isClientError = isClientError;

const isServerError = status => types[TYPE_SERVER_ERROR](status);

exports.isServerError = isServerError;

const getStatusType = status => {
  for (let i = 0; i < typesCount; i++) {
    const type = checkOrder[i];
    const fn = types[type];

    if (fn(status)) {
      return type;
    }
  } // @todo throw ?

};

var _default = getStatusType;
exports.default = _default;